// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String
  email String
  password String
  is_admin   Boolean @default(false) 

  created_at DateTime? @default(now())
  modified_at DateTime? @default(now())

  @@map("users")
  orders Order[]
  address Address[]
  cart Cart[]
}


model Address {
  id        String    @id @default(uuid())
  name      String
  street    String
  number    String
  neighborhood String
  complement String
  city      String
  state     String
  country   String
  zipcode   String
  user      User      @relation(fields: [user_id], references: [id])
  user_id    String

  cart Cart[]
  order Order[]
}

model Category {
  id String @id @default(uuid())
  name String
  created_at DateTime? @default(now())
  modified_at DateTime? @default(now())

  @@map("categories")
  products Product[]
}
model Brand {
  id String @id @default(uuid())
  name String
  description String?
  image_url String?
  created_at DateTime? @default(now())
  modified_at DateTime? @default(now())

  products Product[]
}

model Product {
   id String @id @default(uuid())
  name String
  price String
  description String
  stock String
  banner  String[]
  created_at DateTime? @default(now())
  modified_at DateTime? @default(now())

  category Category @relation(fields: [category_id], references: [id])
  category_id String

  brand Brand? @relation(fields: [brand_id], references: [id])
  brand_id String?
  @@map("products")
  products_on_order ProductOnOrder[]
  cart_item CartItem[]
}

model Order {
  id String @id @default(uuid())
  status Boolean @default(false)
  draft Boolean @default(true)
  active Boolean @default(true)
  delivered Boolean @default(false)
  paid Boolean @default(false)
  delivery_date DateTime?
  payment_date DateTime?
  created_at DateTime? @default(now())
  modified_at DateTime? @default(now())

  user User @relation(fields: [user_id], references: [id])
  user_id String
  address Address? @relation(fields: [address_id], references: [id])
  address_id String?
  orderItems ProductOnOrder[]
}

model ProductOnOrder {
  productsOnOrder Product @relation(fields: [product_id], references: [id])
  product_id String
  order Order @relation(fields: [order_id], references: [id])
  order_id String
  quantity Int

  @@id([product_id, order_id])

  @@map("ProductOnOrder")
}
model Cart {
  id String @id @default(uuid())
  created_at DateTime? @default(now())
  modified_at DateTime? @default(now())

  user User @relation(fields: [user_id], references: [id])
  user_id String
  address Address? @relation(fields: [address_id], references: [id])
  address_id String?
  cartItems CartItem[]
}

model CartItem {
  id String @id @default(uuid())
  quantity Int
  created_at DateTime? @default(now())
  modified_at DateTime? @default(now())  
  
  cart Cart @relation(fields: [cart_id], references: [id])
  cart_id String
  product Product @relation(fields: [product_id], references: [id])
  product_id String
}
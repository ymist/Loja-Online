generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String
  password    String
  created_at  DateTime? @default(now())
  modified_at DateTime? @default(now())
  is_admin    Boolean   @default(false)
  address     Address[]
  cart        Cart[]
  Order       Order[]

  @@map("users")
}

model Address {
  id           String  @id @default(uuid())
  street       String
  number       String
  neighborhood String
  complement   String
  city         String
  state        String
  country      String
  zipcode      String
  user_id      String
  name         String
  user         User    @relation(fields: [user_id], references: [id])
  Order        Order[]
}

model Category {
  id          String    @id @default(uuid())
  name        String
  created_at  DateTime? @default(now())
  modified_at DateTime? @default(now())
  products    Product[]

  @@map("categories")
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  description String?
  image_url   String?
  created_at  DateTime? @default(now())
  modified_at DateTime? @default(now())
  products    Product[]
}

model Product {
  id                String           @id @default(uuid())
  name              String
  price             String
  description       String
  created_at        DateTime?        @default(now())
  modified_at       DateTime?        @default(now())
  category_id       String
  brand_id          String?
  banner            String[]
  SKU               String
  stock             Int?
  cart_item         CartItem[]
  products_on_order ProductOnOrder[]
  brand             Brand?           @relation(fields: [brand_id], references: [id])
  category          Category         @relation(fields: [category_id], references: [id])

  @@map("products")
}

model ProductOnOrder {
  product_id      String
  order_id        String
  quantity        Int
  order           Order   @relation(fields: [order_id], references: [id])
  productsOnOrder Product @relation(fields: [product_id], references: [id])

  @@id([product_id, order_id])
  @@map("ProductOnOrder")
}

model Cart {
  id          String     @id @default(uuid())
  created_at  DateTime?  @default(now())
  modified_at DateTime?  @default(now())
  user_id     String
  active      Boolean    @default(true)
  converted   Boolean    @default(false)
  user        User       @relation(fields: [user_id], references: [id])
  cartItems   CartItem[]
}

model CartItem {
  id          String    @id @default(uuid())
  quantity    Int
  created_at  DateTime? @default(now())
  modified_at DateTime? @default(now())
  cart_id     String
  product_id  String
  cart        Cart      @relation(fields: [cart_id], references: [id])
  product     Product   @relation(fields: [product_id], references: [id])
}

model Order {
  id             String           @id
  active         Boolean          @default(true)
  delivered      Boolean          @default(false)
  paid           Boolean          @default(false)
  delivery_date  DateTime?
  payment_date   DateTime?
  created_at     DateTime?        @default(now())
  modified_at    DateTime?        @default(now())
  user_id        String
  address_id     String?
  cancel         Boolean          @default(false)
  out_delivery   Boolean          @default(false)
  delivered_date DateTime?
  Address        Address?         @relation(fields: [address_id], references: [id])
  users          User             @relation(fields: [user_id], references: [id])
  orderItems     ProductOnOrder[]
}

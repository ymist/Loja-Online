generator client {
  provider = "prisma-client-js"
  output   = "./generated/new"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL_RAILWAY")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  cpf         String?   @unique
  phone       String?
  password    String
  created_at  DateTime? @default(now())
  modified_at DateTime? @default(now())
  is_admin    Boolean   @default(false)
  address     Address[]
  cart        Cart[]
  order       Order[]
  comments    Comments[]

  @@map("users")
  @@index([email], name: "user_email_idx")
  @@index([cpf], name: "user_cpf_idx")
}

model Address {
  id           String  @id @default(uuid())
  street       String
  number       Int?
  neighborhood String
  complement   String?
  city         String
  state        String
  country      String
  zipcode      String
  user_id      String
  name         String
  user         User    @relation(fields: [user_id], references: [id])
}

model Comments {
  id          String  @id @default(uuid())
  title       String
  rating      Int
  description String
  product_id  String
  user_id     String
  images      String[]

  product Product @relation(fields: [product_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  created_at  DateTime? @default(now())
  modified_at DateTime? @default(now())
  products    ProductCategory[]

  @@map("categories")
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  description String?
  image_url   String?
  created_at  DateTime? @default(now())
  modified_at DateTime? @default(now())
  products    Product[]

  @@map("brands")
}

model Product {
  id                String           @id @default(uuid())
  name              String
  price             String
  description       String
  created_at        DateTime?        @default(now())
  modified_at       DateTime?        @default(now())
  brand_id          String?
  banner            String[]
  SKU               String
  stock             Int?
  cart_item         CartItem[]
  products_on_order ProductOnOrder[]
  comments          Comments[]
  brand             Brand?           @relation(fields: [brand_id], references: [id])
  categories        ProductCategory[]

  @@map("products")
  @@index([name], name: "product_name_idx")
}

model ProductCategory {
  product_id   String
  category_id  String
  product      Product  @relation(fields: [product_id], references: [id])
  category     Category @relation(fields: [category_id], references: [id])

  @@id([product_id, category_id])
  @@map("product_categories")
}

model ProductOnOrder {
  product_id      String
  price           Int?
  order_id        String
  quantity        Int
  order           Order   @relation(fields: [order_id], references: [id])
  productsOnOrder Product @relation(fields: [product_id], references: [id])

  @@id([product_id, order_id])
  @@map("ProductOnOrder")
}

model Cart {
  id          String     @id @default(uuid())
  created_at  DateTime?  @default(now())
  modified_at DateTime?  @default(now())
  user_id     String
  active      Boolean    @default(true)
  converted   Boolean    @default(false)
  user        User       @relation(fields: [user_id], references: [id])
  cartItems   CartItem[]
}

model CartItem {
  id          String    @id @default(uuid())
  quantity    Int
  created_at  DateTime? @default(now())
  modified_at DateTime? @default(now())
  cart_id     String
  product_id  String
  cart        Cart      @relation(fields: [cart_id], references: [id])
  product     Product   @relation(fields: [product_id], references: [id])
}

model Order {
  id             String           @id @default(uuid())
  active         Boolean          @default(true)
  delivered      Boolean          @default(false)
  paid           Boolean          @default(false)
  payment_date   DateTime?
  cancel         Boolean          @default(false)
  out_delivery   Boolean          @default(false)
  delivery_date  DateTime?
  delivered_date DateTime?
  created_at     DateTime?        @default(now())
  modified_at    DateTime?        @default(now())
  user_id        String
  street         String?
  number         Int?
  neighborhood   String?
  complement     String?
  city           String?
  state          String?
  country        String?
  zipcode        String?
  name           String?
  grand_total    Int?
  users          User             @relation(fields: [user_id], references: [id])
  orderItems     ProductOnOrder[]
  payments       Payment[]

  @@map("orders")
  @@index([user_id], name: "order_user_idx")
}

model PaymentMethod {
  id          String   @id @default(uuid())
  name        String
  description String?
  created_at  DateTime @default(now())
  modified_at DateTime @default(now())
  payments    Payment[]
}

model Payment {
  id              String     @id @default(uuid())
  order_id        String
  payment_method_id String
  amount          Float
  currency        String
  status          PaymentStatus
  created_at      DateTime   @default(now())
  modified_at     DateTime   @default(now())
  order           Order      @relation(fields: [order_id], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [payment_method_id], references: [id])

  @@index([order_id], name: "payment_order_idx")
  @@index([payment_method_id], name: "payment_method_idx")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
